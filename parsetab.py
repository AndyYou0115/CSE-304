
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "BOOLEAN BOOL_AND BOOL_OR BREAK CLASS CONTINUE DECREMENT DISQUALITY DO ELSE EQUALITY EXTENDS FALSE FLOAT FLOAT_CONST FOR GEQ ID IF INCREMENT INT INT_CONST LEQ MULTI_COMMENT NEW NULL PRIVATE PUBLIC RETURN SING_COMMENT STATIC STRING_CONST SUPER THIS TRUE VOID WHILEprogram : class_decl program\n                | emptyclass_decl : CLASS ID '(' EXTENDS ID ')' '{' temp_1 '}'\n                | CLASS ID '{' temp_1 '}' \n                \n        temp_1 : class_body_decl temp_2\n        \n        temp_2 : class_body_decl temp_2\n                | emptyclass_body_decl : field_decl\n                        | method_decl\n                        | constructor_declfield_decl : modifier var_decl\n    \n    modifier : PUBLIC STATIC\n            | PUBLIC\n            | PRIVATE STATIC\n            | PRIVATE\n            | STATIC\n            | empty\n            \n    var_decl : type variables ';'\n    \n    type : INT\n        | FLOAT\n        | BOOLEAN\n        | ID\n        \n    variables : variable temp_3\n    \n    temp_3 : ',' variable temp_3\n            | empty\n            \n    variable : ID method_decl : modifier temp_5 ID '(' formals ')' block\n     \n    constructor_decl : modifier ID '(' formals ')' block\n\n    temp_5 : type\n            | VOID\n            \n    formals : formal_param temp_6\n            | empty\n            \n    temp_6 : ',' formal_param temp_6\n            | empty\n            \n    formal_param : type variableblock : '{'  '}' \n\n        empty :"
    
_lr_action_items = {'CLASS':([0,2,21,61,],[4,4,-4,-3,]),'$end':([0,1,2,3,5,21,61,],[-37,0,-37,-2,-1,-4,-3,]),'ID':([4,8,9,11,12,13,14,15,16,17,18,19,22,24,25,26,27,28,29,30,31,32,33,34,38,42,43,44,48,49,51,57,63,67,68,],[6,-37,20,-37,-8,-9,-10,27,-13,-16,-15,-17,-37,-17,-11,37,-22,41,-30,-19,-20,-21,-12,-14,44,-37,44,-22,41,-18,41,44,-28,-27,-36,]),'(':([6,27,37,],[7,38,43,]),'{':([6,35,55,62,],[8,42,64,64,]),'EXTENDS':([7,],[9,]),'PUBLIC':([8,11,12,13,14,22,25,42,49,63,67,68,],[16,16,-8,-9,-10,16,-11,16,-18,-28,-27,-36,]),'PRIVATE':([8,11,12,13,14,22,25,42,49,63,67,68,],[18,18,-8,-9,-10,18,-11,18,-18,-28,-27,-36,]),'STATIC':([8,11,12,13,14,16,18,22,25,42,49,63,67,68,],[17,17,-8,-9,-10,33,34,17,-11,17,-18,-28,-27,-36,]),'VOID':([8,11,12,13,14,15,16,17,18,19,22,24,25,33,34,42,49,63,67,68,],[-37,-37,-8,-9,-10,29,-13,-16,-15,-17,-37,-17,-11,-12,-14,-37,-18,-28,-27,-36,]),'INT':([8,11,12,13,14,15,16,17,18,19,22,24,25,33,34,38,42,43,49,57,63,67,68,],[-37,-37,-8,-9,-10,30,-13,-16,-15,-17,-37,-17,-11,-12,-14,30,-37,30,-18,30,-28,-27,-36,]),'FLOAT':([8,11,12,13,14,15,16,17,18,19,22,24,25,33,34,38,42,43,49,57,63,67,68,],[-37,-37,-8,-9,-10,31,-13,-16,-15,-17,-37,-17,-11,-12,-14,31,-37,31,-18,31,-28,-27,-36,]),'BOOLEAN':([8,11,12,13,14,15,16,17,18,19,22,24,25,33,34,38,42,43,49,57,63,67,68,],[-37,-37,-8,-9,-10,32,-13,-16,-15,-17,-37,-17,-11,-12,-14,32,-37,32,-18,32,-28,-27,-36,]),'}':([10,11,12,13,14,22,23,24,25,36,49,53,63,64,67,68,],[21,-37,-8,-9,-10,-37,-5,-7,-11,-6,-18,61,-28,68,-27,-36,]),')':([20,38,41,43,45,46,47,54,56,58,59,65,69,],[35,-37,-26,-37,55,-37,-32,62,-31,-34,-35,-37,-33,]),';':([39,40,41,50,52,60,66,],[49,-37,-26,-23,-25,-37,-24,]),',':([40,41,46,59,60,65,],[51,-26,57,-35,51,57,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,],[1,5,]),'class_decl':([0,2,],[2,2,]),'empty':([0,2,8,11,22,38,40,42,43,46,60,65,],[3,3,19,24,24,47,52,19,47,58,52,58,]),'temp_1':([8,42,],[10,53,]),'class_body_decl':([8,11,22,42,],[11,22,22,11,]),'field_decl':([8,11,22,42,],[12,12,12,12,]),'method_decl':([8,11,22,42,],[13,13,13,13,]),'constructor_decl':([8,11,22,42,],[14,14,14,14,]),'modifier':([8,11,22,42,],[15,15,15,15,]),'temp_2':([11,22,],[23,36,]),'var_decl':([15,],[25,]),'temp_5':([15,],[26,]),'type':([15,38,43,57,],[28,48,48,48,]),'variables':([28,],[39,]),'variable':([28,48,51,],[40,59,60,]),'formals':([38,43,],[45,54,]),'formal_param':([38,43,57,],[46,46,65,]),'temp_3':([40,60,],[50,66,]),'temp_6':([46,65,],[56,69,]),'block':([55,62,],[63,67,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> class_decl program','program',2,'p_program','decaf_parser.py',6),
  ('program -> empty','program',1,'p_program','decaf_parser.py',7),
  ('class_decl -> CLASS ID ( EXTENDS ID ) { temp_1 }','class_decl',9,'p_class_decl','decaf_parser.py',10),
  ('class_decl -> CLASS ID { temp_1 }','class_decl',5,'p_class_decl','decaf_parser.py',11),
  ('temp_1 -> class_body_decl temp_2','temp_1',2,'p_class_decl','decaf_parser.py',13),
  ('temp_2 -> class_body_decl temp_2','temp_2',2,'p_class_decl','decaf_parser.py',15),
  ('temp_2 -> empty','temp_2',1,'p_class_decl','decaf_parser.py',16),
  ('class_body_decl -> field_decl','class_body_decl',1,'p_class_body_decl','decaf_parser.py',19),
  ('class_body_decl -> method_decl','class_body_decl',1,'p_class_body_decl','decaf_parser.py',20),
  ('class_body_decl -> constructor_decl','class_body_decl',1,'p_class_body_decl','decaf_parser.py',21),
  ('field_decl -> modifier var_decl','field_decl',2,'p_field_decl','decaf_parser.py',24),
  ('modifier -> PUBLIC STATIC','modifier',2,'p_field_decl','decaf_parser.py',26),
  ('modifier -> PUBLIC','modifier',1,'p_field_decl','decaf_parser.py',27),
  ('modifier -> PRIVATE STATIC','modifier',2,'p_field_decl','decaf_parser.py',28),
  ('modifier -> PRIVATE','modifier',1,'p_field_decl','decaf_parser.py',29),
  ('modifier -> STATIC','modifier',1,'p_field_decl','decaf_parser.py',30),
  ('modifier -> empty','modifier',1,'p_field_decl','decaf_parser.py',31),
  ('var_decl -> type variables ;','var_decl',3,'p_field_decl','decaf_parser.py',33),
  ('type -> INT','type',1,'p_field_decl','decaf_parser.py',35),
  ('type -> FLOAT','type',1,'p_field_decl','decaf_parser.py',36),
  ('type -> BOOLEAN','type',1,'p_field_decl','decaf_parser.py',37),
  ('type -> ID','type',1,'p_field_decl','decaf_parser.py',38),
  ('variables -> variable temp_3','variables',2,'p_field_decl','decaf_parser.py',40),
  ('temp_3 -> , variable temp_3','temp_3',3,'p_field_decl','decaf_parser.py',42),
  ('temp_3 -> empty','temp_3',1,'p_field_decl','decaf_parser.py',43),
  ('variable -> ID','variable',1,'p_field_decl','decaf_parser.py',45),
  ('method_decl -> modifier temp_5 ID ( formals ) block','method_decl',7,'p_method_decl','decaf_parser.py',48),
  ('constructor_decl -> modifier ID ( formals ) block','constructor_decl',6,'p_method_decl','decaf_parser.py',50),
  ('temp_5 -> type','temp_5',1,'p_method_decl','decaf_parser.py',52),
  ('temp_5 -> VOID','temp_5',1,'p_method_decl','decaf_parser.py',53),
  ('formals -> formal_param temp_6','formals',2,'p_method_decl','decaf_parser.py',55),
  ('formals -> empty','formals',1,'p_method_decl','decaf_parser.py',56),
  ('temp_6 -> , formal_param temp_6','temp_6',3,'p_method_decl','decaf_parser.py',58),
  ('temp_6 -> empty','temp_6',1,'p_method_decl','decaf_parser.py',59),
  ('formal_param -> type variable','formal_param',2,'p_method_decl','decaf_parser.py',61),
  ('block -> { }','block',2,'p_block','decaf_parser.py',64),
  ('empty -> <empty>','empty',0,'p_empty','decaf_parser.py',70),
]
